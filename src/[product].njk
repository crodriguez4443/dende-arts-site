---
pagination:
  data: products
  size: 1
  alias: product
  addAllPagesToCollections: true
permalink: "/{{ product.slug | slugify }}/"
layout: layout.njk

---

<section class="main-grid product-sale-page">
    {% include "nav.njk" %}
    <div class="product-image-wrapper">
        <!-- Container for additional product photos -->
        <div class="additional-photos-container" id="thumbnailContainer">
            {% if product.images.length > 0 %}
                {% for image in product.images %}
                    {% if loop.index0 < 4 %}  {# Show first 4 images including featured image #}
                        <img src="{{ image.file.url }}" 
                            alt="{{ product.name }} - {% if loop.index0 === 0 %}Featured{% else %}Additional{% endif %} Image {{ loop.index }}"
                            class="thumbnail-image {% if loop.index0 === 0 %}active{% endif %}"
                            loading="lazy"
                            width="80"
                            height="80"
                            data-index="{{ loop.index0 }}"
                            onclick="swapImages(this)">
                    {% endif %}
                {% endfor %}
            {% endif %}
        </div>

        <!-- Primary image container -->
        <div class="left-half-img-container product-feature-image">
            {% if product.images and product.images[0] %}
                <img src="{{ product.images[0].file.url }}" 
                    alt="{{ product.name }}"
                    class="main-product-image"
                    id="mainImage"
                    data-index="0"
                    width="400"
                    height="400">
            {% endif %}
        </div>
    </div>

    <div class="right-half-content product-sale-content">
        {% block content %}
        <div class="product-card">
            {% if product %}
                <h1 class="product-page-title">{{ product.name }}</h1>
                <p class="product-subtext">{{ product.content.subtext }}</p>
                <div class="price">
                    Price: $ {{ product.price }} USD
                </div>

                {% if product.description %}
                    <div class="description">
                        {{ product.description | safe }}
                    </div>
                {% endif %}

                {% if product.name=='Abada Joggers' %}
                    <div class="features-container padding-bottom-1">
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/fabric-icon.svg", "4-way stretch material", "feature-icon", undefined, undefined, undefined, eager %}
                            </div>
                            <p>4-WAY STRETCH</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/waistband.svg", "abadas with elastic waistband", "feature-icon", undefined, undefined, undefined, loading="eager"  %}
                            </div>
                            <p>Elastic Waistband</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/taper.svg", "abadas with tapered fit", "feature-icon", undefined, undefined, undefined, loading="eager" %}
                            </div>
                            <p>Tapered Fit</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/zipper.svg", "abadas with zipper pocket", "feature-icon", undefined, undefined, undefined, loading="eager" %}
                            </div>
                            <p>Zippered Pocket</p>
                        </div>
                    </div>
                {% endif %}
                
                <div class="flex-box padding-bottom-2 ">
                    {% if product.options %}
                        <div class="options">
                            {% for option in product.options %}
                                <div class="option-group">
                                    <label for="{{ option.name }}">{{ option.name }}:</label>
                                    <select id="{{ option.name }}" name="{{ option.name }}">
                                        {% for value in option.values %}
                                            <option value="{{ value.name }}">{{ value.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            {% endfor %}
                        </div>
                    {% endif %}
                    
                    <!-- Quantity Control -->
                    <div class="quantity-control">
                        <label for="quantity">Quantity:</label>
                        <div class="quantity-wrapper">
                            <button class="quantity-btn minus" type="button">-</button>
                            <input type="number" id="quantity" name="quantity" value="1" min="1" readonly>
                            <button class="quantity-btn plus" type="button">+</button>
                        </div>
                    </div>
                </div>

                <div class="flex-box">
                    <button id="addToCart" 
                            onclick="addToCart('{{ product.id }}')"
                            class="add-to-cart-button">
                        Add to Cart
                    </button>
                    
                    <!-- remove buy now button
                    <button id="buyNow" 
                            onclick="buyNow('{{ product.id }}')"
                            class="buy-now-button">
                        Checkout
                    </button>
                    -->
                </div>
            {% endif %}
        </div>
    </div>
    <div class="yotpo-widget-instance" data-yotpo-instance-id="1088850"></div>
      
</section>


<script src="https://cdn-widgetsrepository.yotpo.com/v1/loader/hkdxOHpNSoL9mUi2CASOsZFdXsMLCVc5ZXTHOlLP" async></script>

<script>
async function addToCart(productId) {
    const quantity = document.getElementById('quantity').value;
    const button = document.getElementById('addToCart');
    const options = {};
    
    // Gather selected options if they exist
    document.querySelectorAll('.option-group select').forEach(select => {
        options[select.name] = select.value;
    });

    // Show immediate feedback
    button.disabled = true;
    button.textContent = 'Adding...';
    
    // Open cart sidebar immediately for better UX - better perceived performance
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartOverlay = document.getElementById('cart-overlay');
    if (cartSidebar && cartOverlay) {
        cartSidebar.classList.add('active');
        cartOverlay.classList.add('active');
    }
    
    // Show loading state on the cart
    const cartItems = document.getElementById('cart-items');
    if (cartItems) {
        cartItems.classList.add('loading');
    }
    
    try {
        // Use optimistic UI update - immediately show a temporary item in cart
        // This makes the cart feel more responsive while API call happens in background
        if (window.swellCartCount === undefined) {
            window.swellCartCount = 0;
        }
        window.swellCartCount += parseInt(quantity);
        updateCartCount();
        
        // Use our cached cart system
        await swell.cachedCart.addItem({
            product_id: productId,
            quantity: parseInt(quantity),
            options: options
        });

        // Show success feedback
        button.textContent = 'Added to Cart!';
        
        // Update the cart display with actual items
        const updateCartDisplayFn = window.updateCartDisplay;
        if (typeof updateCartDisplayFn === 'function') {
            updateCartDisplayFn();
        }
        
        // Reset button after a short delay
        setTimeout(() => {
            button.disabled = false;
            button.textContent = 'Add to Cart';
        }, 1500);

    } catch (error) {
        console.error('Add to cart error:', error);
        button.disabled = false;
        button.textContent = 'Add to Cart'; 
        alert('Error adding to cart: ' + error.message);
        
        // Remove loading state
        if (cartItems) {
            cartItems.classList.remove('loading');
        }
        
        // Update cart count based on actual value
        const cart = await swell.cachedCart.get();
        window.swellCartCount = cart?.itemQuantity || 0;
        updateCartCount();
    }
}


// Buy Now --> actually check out button now

{# async function buyNow(productId) {
    const button = document.getElementById('buyNow');
    button.disabled = true;
    button.textContent = 'Processing...';

    try {
        // Get current cart state
        const currentCart = await swell.cart.get();
        
        // Detailed cart logging
        console.log('Full cart object:', currentCart);
        console.log('Cart ID:', currentCart?.id);
        console.log('Cart currency:', currentCart?.currency);
        console.log('Checkout ID:', currentCart?.checkout_id);
        console.log('Items in cart:', currentCart?.items?.length || 0);
        console.log('Checkout URL:', currentCart?.checkoutUrl);

        // Check if cart is empty
        if (!currentCart?.items || currentCart.items.length === 0) {
            button.disabled = false;
            button.textContent = 'Buy Now';
            alert('Your cart is empty. Please add items before checkout.');
            return;
        }

        // Double check we have a checkout URL
        if (!currentCart?.checkoutUrl) {
            // Try to construct the checkout URL if we have a checkout_id
            if (currentCart?.checkout_id) {
                const checkoutUrl = `https://dendearts.swell.store/checkout/${currentCart.checkout_id}`;
                console.log('Constructed checkout URL:', checkoutUrl);
                window.location.href = checkoutUrl;
                return;
            }
            throw new Error('Unable to generate checkout URL');
        }

        // If we have a direct checkoutUrl, use it
        console.log('Redirecting to checkout:', currentCart.checkoutUrl);
        window.location.href = currentCart.checkoutUrl;

    } catch (error) {
        console.error('Buy now error:', error);
        button.disabled = false;
        button.textContent = 'Buy Now';
        alert('Error processing checkout: ' + error.message);
    }
} #}

    // Store all product images data
const productImages = JSON.parse('{{ product.images | dump | safe }}');

function swapImages(thumbnailElement) {
    const mainImage = document.getElementById('mainImage');
    const thumbnails = document.querySelectorAll('.thumbnail-image');
    
    // Remove active class from all thumbnails
    thumbnails.forEach(thumb => thumb.classList.remove('active'));
    
    // Add active class to clicked thumbnail
    thumbnailElement.classList.add('active');

    // Get the index of clicked thumbnail
    const thumbnailIndex = parseInt(thumbnailElement.dataset.index);
    
    // Add fade out effect
    mainImage.style.opacity = '0';
    
    // Update main image after a brief delay (for transition effect)
    setTimeout(() => {
        mainImage.src = productImages[thumbnailIndex].file.url;
        mainImage.alt = productImages[thumbnailIndex].alt;
        mainImage.dataset.index = thumbnailIndex;
        mainImage.style.opacity = '1';
    }, 300);
}

// Initialize the first thumbnail as active
document.addEventListener('DOMContentLoaded', () => {
    const firstThumbnail = document.querySelector('.thumbnail-image');
    if (firstThumbnail) {
        firstThumbnail.classList.add('active');
    }
});

</script>
{% endblock %}