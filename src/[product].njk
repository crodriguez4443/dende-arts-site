---
pagination:
  data: products
  size: 1
  alias: product
  addAllPagesToCollections: true
permalink: "/{{ product.slug | slugify }}/"
layout: layout.njk

product_title: Abada Joggers 


---

<section class="main-grid product-sale-page">
    {% include "nav.njk" %}
    <div class="product-image-wrapper">
        <!-- Container for additional product photos -->
        <div class="additional-photos-container" id="thumbnailContainer">
            {% if product.images.length > 0 %}
                {% for image in product.images %}
                    {% if loop.index0 < 4 %}  {# Show first 4 images including featured image #}
                        <img src="{{ image.file.url }}" 
                            alt="{{ product.name }} - {% if loop.index0 === 0 %}Featured{% else %}Additional{% endif %} Image {{ loop.index }}"
                            class="thumbnail-image {% if loop.index0 === 0 %}active{% endif %}"
                            loading="lazy"
                            width="80"
                            height="80"
                            data-index="{{ loop.index0 }}"
                            onclick="swapImages(this)">
                    {% endif %}
                {% endfor %}
            {% endif %}
        </div>

        <!-- Primary image container -->
        <div class="left-half-img-container product-feature-image">
            {% if product.images and product.images[0] %}
                <img src="{{ product.images[0].file.url }}" 
                    alt="{{ product.name }}"
                    class="main-product-image"
                    id="mainImage"
                    data-index="0"
                    width="400"
                    height="400">
            {% endif %}
        </div>
    </div>

    <div class="right-half-content product-sale-content">
        {% block content %}
        <div class="product-card">
            {% if product %}
                <h1 class="product-page-title">{{ product.name }}</h1>
                <p class="product-subtext">{{ product.content.subtext }}</p>
                <div class="price">
                    Price: $ {{ product.price }} USD
                </div>

                {% if product.description %}
                    <div class="description">
                        {{ product.description | safe }}
                    </div>
                {% endif %}

                {% if product.name=='Abada Joggers' %}
                    <div class="features-container padding-bottom-1">
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/fabric-icon.svg", "4-way stretch material", "feature-icon", undefined, undefined, undefined, eager %}
                            </div>
                            <p>4-WAY STRETCH</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/waistband.svg", "abadas with elastic waistband", "feature-icon", undefined, undefined, undefined, loading="eager"  %}
                            </div>
                            <p>Elastic Waistband</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/taper.svg", "abadas with tapered fit", "feature-icon", undefined, undefined, undefined, loading="eager" %}
                            </div>
                            <p>Tapered Fit</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/zipper.svg", "abadas with zipper pocket", "feature-icon", undefined, undefined, undefined, loading="eager" %}
                            </div>
                            <p>Zippered Pocket</p>
                        </div>
                    </div>
                {% endif %}
                
                <div class="flex-box-column padding-bottom-2 ">
                    {% if product.options %}
                        <!-- LOCATION 2: Stock Alert Banner (conditionally shown) -->
                        <div id="stockAlert" class="stock-alert-banner" style="display: none;">
                            <svg class="alert-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M10 0C4.48 0 0 4.48 0 10C0 15.52 4.48 20 10 20C15.52 20 20 15.52 20 10C20 4.48 15.52 0 10 0ZM11 15H9V13H11V15ZM11 11H9V5H11V11Z" fill="currentColor"/>
                            </svg>
                            <span id="stockAlertText">Only <strong id="stockCount">0</strong> left in stock - Order soon!</span>
                        </div>
                        <!-- Size Selection -->
                        <div class="options">
                        {% for option in product.options %}
                        <div class="option-group">
                            <div class="size-selector-header">
                            <label class="size-selector-label">Select your Size</label>
                            </div>
                            
                            <div class="size-boxes-container" role="radiogroup" aria-label="{{ option.name }}">
                            {% for value in option.values %}
                                <button 
                                type="button"
                                class="size-box"
                                data-size="{{ value.name }}"
                                data-option-id="{{ value.id }}"
                                data-option-name="{{ option.name }}"
                                role="radio"
                                aria-checked="false"
                                onclick="selectSize(this)">
                                {{ value.name }}
                                </button>
                            {% endfor %}
                            </div>
                            
                            <!-- Hidden input starts empty -->
                            <input type="hidden" id="{{ option.name }}" name="{{ option.name }}" value="">
                        </div>
                        {% endfor %}
                    </div>

                    {% endif %}
                    
                    <!-- Quantity Control -->
                    {# <div class="quantity-control">
                        <label for="quantity">Quantity:</label>
                        <div class="quantity-wrapper">
                            <button class="quantity-btn minus" type="button">-</button>
                            <input type="number" id="quantity" name="quantity" value="1" min="1" readonly style="margin:0">
                            <button class="quantity-btn plus" type="button">+</button>
                        </div>s
                    </div> #}
                </div>

                <div class="flex-box">
                    <button id="addToCart" 
                            onclick="addToCart('{{ product.id }}')"
                            class="add-to-cart-button">
                        Add to Cart
                    </button>
                </div>
            {% endif %}
        </div>
    </div>

    {# ----- START: REVIEWS SECTION ----- #}
    <div class="product-reviews-section">
        {# Calculate review statistics #}
        {% set totalReviews = 0 %}
        {% set sumOfScores = 0 %}
        {% set averageRating = 0 %}

        {% if collections.abadaReviews and collections.abadaReviews.length > 0 %}
            {% set totalReviews = collections.abadaReviews.length %}
            {% for review in collections.abadaReviews %}
                {% set sumOfScores = sumOfScores + review.review_score %}
            {% endfor %}
            {% if totalReviews > 0 %}
                {% set averageRating = (sumOfScores / totalReviews) | round(1) %}
            {% endif %}
        {% endif %}

        <div class="product-review-header">
            <h2 class="product-review-header__title">Customer Reviews</h2>
            {% if totalReviews > 0 %}
            <div class="product-review-header__summary">
                <div class="product-review-header__average-stars">
                    {% for i in range(1, 6) %}
                        {% if i <= averageRating %}
                            <span class="star filled">&#9733;</span>
                        {% elif i - 0.5 <= averageRating %}
                            <span class="star half-filled"><span class="star-inner">&#9733;</span>&#9734;</span>
                        {% else %}
                            <span class="star empty">&#9734;</span>
                        {% endif %}
                    {% endfor %}
                </div>
                <span class="review-average">{{ averageRating }} / 5</span>
                <span class="review-count">({{ totalReviews }} review{% if totalReviews != 1 %}s{% endif %})</span>
            </div>
            {% endif %}
        </div>

        {# --- Review Request --- #}

        <button id="toggleReviewFormBtn" class="review-toggle-btn">
            Write a Review
            <span class="arrow-down"></span>
        </button>
        <div id="reviewFormContainer" class="review-form-collapsible">
            <div class="bulk-form-container">
                <form id="reviewForm" class="contact-form" 
                    name="review-form"
                    method="POST"
                    data-netlify="true"
                    netlify-honeypot="bot-field"
                    action="/Thank-you/" 
                >
                    {# Honeypot field #}
                    <p hidden>
                        <label>Don't fill this out if you're human: <input name="bot-field" /></label>
                    </p>
                    
                    <div class="selectors-container">
                        <div class="form-group">
                            <label for="reviewAuthor">Name</label>
                            <input type="text" id="reviewAuthor" name="author" required>
                        </div>
                        <div class="form-group">
                            <label for="reviewEmail">Email</label>
                            <input type="email" id="reviewEmail" name="email" required>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Rating</label>
                        <div class="star-rating">
                            <input type="radio" id="rating-5" name="review_score" value="5" required/><label for="rating-5" title="5 stars">★</label>
                            <input type="radio" id="rating-4" name="review_score" value="4" /><label for="rating-4" title="4 stars">★</label>
                            <input type="radio" id="rating-3" name="review_score" value="3" /><label for="rating-3" title="3 stars">★</label>
                            <input type="radio" id="rating-2" name="review_score" value="2" /><label for="rating-2" title="2 stars">★</label>
                            <input type="radio" id="rating-1" name="review_score" value="1" /><label for="rating-1" title="1 star">★</label>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="reviewTitle">Review Title</label>
                        <input type="text" id="reviewTitle" name="review_title" required>
                    </div>

                    <div class="form-group">
                        <label for="reviewContent">Review</label>
                        <textarea id="reviewContent" name="review_content" rows="5" required></textarea>
                    </div>

                    <button type="submit" class="btn btn-very-dark btn-form">Submit Review</button>
                </form>
            </div>
        </div>
        {# --- End Review Request --- #}

        {% if collections.abadaReviews and collections.abadaReviews.length > 0 %}
            <ul class="reviews-list">
                {% for review in collections.abadaReviews %}
                <li class="review-item">
                    <div class="review-item__stars">
                        {% for i in range(1, 6) %} {# Loop 1 to 5 #}
                            {% if i <= review.review_score %}
                                <span class="star filled">&#9733;</span> {# Filled star HTML entity ★ #}
                            {% else %}
                                <span class="star empty">&#9734;</span> {# Empty star HTML entity ☆ #}
                            {% endif %}
                        {% endfor %}
                    </div>
                    <h3 class="review-item__title">{{ review.review_title }}</h3>
                    <p class="review-item__meta">
                        <span class="review-item__author-name">By: {{ review.author }} - </span>
                        <span class="review-item__author">{{ review.user_type }}</span>
                        {# DATE REMOVED FROM HERE #}
                    </p>
                    <p class="review-item__content">{{ review.review_content }}</p>
                </li>
                {% endfor %}
            </ul>
        {% else %}
            <p class="no-reviews-message">Be the first to review this product!</p>
        {% endif %}
    </div>
    {# ----- END: REVIEWS SECTION ----- #}

</section>

<style>
    .review-form-section {
        grid-column: 1 / -1;
        padding: 4rem 1rem;
        margin-top: 2rem;
        border-top: 1px solid #eee;
        max-width: 800px;
        margin: 2rem auto 0;
    }

    .review-toggle-btn {
        margin-bottom: 1.5rem;
        font-size: 1.2rem;
        color: var(--title-color);
        display: flex;
        align-items: center;
        justify-self: center;
        gap: 1rem;
        border-bottom: 1.5px solid var(--action-primary);
        padding: 0.5rem;
        transition: color 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    }

    .review-toggle-btn:hover {
        color: var(--action-primary);
    }

    .arrow-down {
        border: solid var(--title-color);
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 4px;
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
        transition: transform 0.3s ease-in-out;
    }

    .review-toggle-btn.active .arrow-down {
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
    }

    .review-form-collapsible {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.5s ease-in-out;
    }
    .review-form-collapsible.active {
        max-height: 1000px; /* Adjust as needed, should be larger than the form's height */
    }

    /* Add padding to form container when it's open */
    .review-form-collapsible .bulk-form-container {
        padding-top: 2rem;
    }

    .contact-form .form-group {
        margin-bottom: 1.5rem;
    }
    .contact-form label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--title-color);
    }
    .contact-form input[type="text"],
    .contact-form input[type="email"],
    .contact-form textarea {
        width: 100%;
        padding: 1rem;
        font-family: 'DM Sans', sans-serif;
        font-size: 1rem;
        background-color: #f8f8f8;
        border: none;
        border-radius: 10px;
        color: #000;
        transition: border-color 0.3s ease;
    }
    .contact-form textarea {
        resize: vertical;
        min-height: 120px;
    }
    /* Star Rating CSS */
    .star-rating {
        display: flex;
        flex-direction: row-reverse; /* This is crucial for the hover effect */
        justify-content: flex-end;
        gap: 0.2rem;
    }
    .star-rating input[type="radio"] {
        display: none;
    }
    .star-rating label {
        color: #ccc;
        cursor: pointer;
        font-size: 2.5rem;
        transition: color 0.2s;
        margin-bottom: 0; /* Override default label margin */
        line-height: 1;
    }
    .star-rating label:hover,
    .star-rating label:hover ~ label {
        color: var(--alt-action);
    }
    .star-rating input[type="radio"]:checked ~ label {
        color: var(--alt-action);
    }

    /* Existing Review Display Styles */
    .product-reviews-section {
        grid-column: 1 / -1; /* Make it full width in your main-grid if needed */
        padding: 2rem 0; /* Add some vertical spacing */
        margin-top: 2rem;
        border-top: 1px solid #eee;
        margin: 0 1rem;
    }
    .product-review-header {
        display: flex;
        flex-wrap: wrap; /* Allow wrapping on smaller screens */
        align-items: center;
        justify-content: center;
        gap: 0rem;
        margin-bottom: 1.5rem;
        padding: 0 1rem; /* Add some padding if section isn't full bleed */
    }
    .product-review-header__title {
        font-size: 1.8rem; 
        margin-right: 1rem; 
        margin-bottom: 0.5rem; 
    }
    .product-review-header__summary {
        display: flex;
        align-items: center;
        gap: 0.75rem; 
    }
    .product-review-header__average-stars .star {
        font-size: 1.2rem; 
        color: #ccc; 
    }
    .product-review-header__average-stars .star.filled,
    .product-review-header__average-stars .star.half-filled .star-inner {
        color: var(--action-primary);
    }
    .product-review-header__average-stars .star.half-filled {
        position: relative; 
    }
    .product-review-header__average-stars .star.half-filled .star-inner {
        position: absolute;
        left: 0;
        top: 0;
        width: 50%; 
        overflow: hidden;
        white-space: nowrap;
    }
    .review-average {
        font-size: 1.2rem; 
    }
    .review-count {
        font-weight: 300;
        font-size: 1rem; 
        color: #555;
    }
    .reviews-list {
        padding: 0;
        margin-left: 1rem;
        margin-right: 1rem;
        max-width: 800px;
        margin: 0 auto;
    }
    li {
        list-style: none;
        margin-bottom: 1.5rem;
    }
    .review-item:hover,
    .review-item:focus {
        transform: none !important;
        margin: 0 0 1.5rem 0 !important;
        list-style: none;
    }
    .reviews-item:hover,
    .reviews-item:focus {
        transform: none !important;
        margin: 0 !important;
    }
    .review-item {
        /* background-color: #f9f9f9; */
        border: 1px solid var(--text-form);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border-bottom: 2px solid var(--action-primary);
    }
    .review-item:last-child {
        margin-bottom: 0;
    }
    .review-item__stars {
        margin-bottom: 0.5rem;
        font-size: 1.25rem; 
    }
    .review-item__stars .star.filled {
        color: var(--action-primary);
    }
    .review-item__stars .star.empty {
        color: #ccc; 
    }
    .review-item__title {
        font-size: 1.25rem;
        margin-top: 0;
        margin-bottom: 0.25rem;
        /* color: #333; */
    }
    .review-item__meta {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 0.75rem;
    }
    .review-item__author {
        font-weight: bold;
    }
    .review-item__content {
        font-size: 1rem;
        line-height: 1.6;
        color: #444;
        margin-bottom: 0;
    }
    .no-reviews-message {
        text-align: center;
        font-style: italic;
        color: #777;
        padding: 2rem;
    }
    @media (min-width: 768px) {
        .product-review-header {
            gap: 2rem;
        }
    }

    /* ========================================
   STOCK ALERT & OUT OF STOCK STYLES
   ======================================== */

    /* Stock Alert Banner (Location 2) */
    .stock-alert-banner {
        width: 100%;
        background-color: #FFF4E6;
        border: 1px solid #FFB84D;
        border-left: 4px solid #FF8C00;
        border-radius: 6px;
        padding: 12px 16px;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 12px;
        font-size: 0.95rem;
        color: #8B4513;
        animation: slideDown 0.3s ease-out;
    }

    .stock-alert-banner.show {
        display: flex !important;
    }

    .stock-alert-banner .alert-icon {
        flex-shrink: 0;
        color: #FF8C00;
    }

    .stock-alert-banner strong {
        color: #D2691E;
        font-weight: 600;
    }

    /* Out of Stock Button (Location 3) */
    .add-to-cart-button.out-of-stock {
        background-color: #6c757d;
        cursor: not-allowed;
        opacity: 0.6;
        border: 2px solid #5a6268;
    }

    .add-to-cart-button.out-of-stock:hover {
        background-color: #6c757d;
        transform: none;
    }

    .add-to-cart-button:disabled {
        cursor: not-allowed;
        opacity: 0.6;
    }

    /* Animations */
    @keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .stock-alert-banner {
            padding: 10px 12px;
            font-size: 0.9rem;
        }
        
        .select-wrapper.out-of-stock::after {
            right: 2.5rem;
            font-size: 1.3rem;
        }
    }

    /* ========================================
    SIZE SELECTOR BOXES 
    ======================================== */

    .size-selector-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .size-selector-label {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--title-color, #333);
        margin: 0;
    }

    .size-guide-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: none;
        border: none;
        color: var(--text-color, #666);
        font-size: 0.95rem;
        cursor: pointer;
        padding: 0.25rem 0.5rem;
        transition: color 0.3s ease;
        text-decoration: underline;
    }

    .size-guide-btn:hover {
        color: var(--action-primary, #000);
    }

    .size-guide-btn svg {
        width: 18px;
        height: 18px;
    }

    .size-boxes-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .size-box {
        /* Box styling */
        min-width: 80px;
        padding: 0.875rem 1.25rem;
        background-color: #fff;
        border: 2px solid #d1d5db; /* Grey outline - adjust to your system color */
        border-radius: 8px; /* Slightly rounded corners */
        
        /* Text styling */
        font-size: 1rem;
        font-weight: 500;
        color: var(--text-color, #333);
        text-align: center;
        
        /* Interaction */
        cursor: pointer;
        transition: all 0.2s ease;
        
        /* Remove button defaults */
        font-family: inherit;
        user-select: none;
    }

    .size-box:hover:not(.disabled):not(.out-of-stock) {
        border-color: var(--action-primary, #000);
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .size-box:active:not(.disabled):not(.out-of-stock) {
        transform: translateY(0);
    }

    /* Selected state */
    .size-box.selected {
        border-color: var(--action-primary, #000);
        border-width: 2px;
        background-color: var(--action-primary, #000);
        color: #fff;
    }

    .size-box.selected:hover {
        background-color: var(--action-primary, #000);
        opacity: 0.9;
    }

    /* Out of stock state */
    .size-box.out-of-stock {
        position: relative;
        background-color: #f3f4f6;
        border-color: #e5e7eb;
        color: #9ca3af;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .size-box.out-of-stock::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 10%;
        right: 10%;
        height: 2px;
        background-color: #dc2626;
        transform: translateY(-50%) rotate(-15deg);
    }

    .size-box.out-of-stock::after {
        content: 'OUT OF STOCK';
        position: absolute;
        bottom: -20px;
        left: 50%;
        transform: translateX(-50%);
        font-size: 0.7rem;
        color: #dc2626;
        font-weight: 600;
        white-space: nowrap;
        letter-spacing: 0.5px;
    }

    .size-box.out-of-stock:hover {
        transform: none;
        box-shadow: none;
        background-color: #f3f4f6;
    }

    /* Low stock badge */
    .size-box.low-stock::after {
        content: 'LOW STOCK';
        position: absolute;
        top: -8px;
        right: -8px;
        background-color: #FF8C00;
        color: white;
        font-size: 0.65rem;
        padding: 2px 6px;
        border-radius: 4px;
        font-weight: 600;
        letter-spacing: 0.5px;
    }

    /* Responsive sizing */
    @media (max-width: 768px) {
        .size-box {
            min-width: 70px;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
        }
        
        .size-boxes-container {
            gap: 0.5rem;
        }
    }

    @media (max-width: 480px) {
        .size-box {
            min-width: 60px;
            padding: 0.65rem 0.85rem;
            font-size: 0.9rem;
        }
    }


</style>

<script>
// ========================================
// PRODUCT IMAGE HANDLING
// ========================================
const productImages = JSON.parse('{{ product.images | dump | safe }}');

function swapImages(thumbnailElement) {
    const mainImage = document.getElementById('mainImage');
    const thumbnails = document.querySelectorAll('.thumbnail-image');
    
    thumbnails.forEach(thumb => thumb.classList.remove('active'));
    thumbnailElement.classList.add('active');

    const thumbnailIndex = parseInt(thumbnailElement.dataset.index);
    
    mainImage.style.opacity = '0';
    
    setTimeout(() => {
        mainImage.src = productImages[thumbnailIndex].file.url;
        mainImage.alt = productImages[thumbnailIndex].alt;
        mainImage.dataset.index = thumbnailIndex;
        mainImage.style.opacity = '1';
    }, 300);
}

// ========================================
// STOCK MANAGEMENT - MOCK DATA
// ========================================
// TEMPORARY: Mock data for testing - REMOVE AFTER TESTING
{# const productVariants = [
    {
        id: "test-variant-1",
        name: "Small",
        stock_level: 5,  // Low stock
        stock_tracking: true,
        option_value_ids: ["627c6f18e80393798c171673"] // Use your actual option IDs from HTML
    },
    {
        id: "test-variant-2", 
        name: "Medium",
        stock_level: 0,  // Out of stock
        stock_tracking: true,
        option_value_ids: ["627c6f18e80393798c171674"] // Use your actual option IDs from HTML
    },
    {
        id: "test-variant-3",
        name: "Large", 
        stock_level: 50,  // Normal stock
        stock_tracking: true,
        option_value_ids: ["627c6f18e80393798c171675"] // Use your actual option IDs from HTML
    },
    {
        id: "test-variant-4",
        name: "XL", 
        stock_level: 8,  // Low stock
        stock_tracking: true,
        option_value_ids: ["627c6f18e80393798c171676"] // Use your actual option IDs from HTML
    }
]; #}

// When using real Swell data, replace above with this line:
const variantData = JSON.parse('{{ product.variants | dump | safe }}') || {};
const productVariants = variantData.results || [];
console.log('🔍 DEBUG: Product variants:', productVariants);

const LOW_STOCK_THRESHOLD = 15;

// ========================================
// STOCK CHECKING FUNCTIONS
// ========================================

// Check stock level for currently selected variant
function checkStockForVariant() {
    console.log('🔍 Checking stock...');
    
    const selectedOptions = {};
    
    // Get selected values from hidden inputs (updated by selectSize function)
    document.querySelectorAll('.option-group input[type="hidden"]').forEach(input => {
        selectedOptions[input.name] = input.value;
    });

    console.log('Selected options:', selectedOptions);
    console.log('Available variants:', productVariants);

    // Find matching variant by size name
    const sizeValue = selectedOptions['Size'];
    const variant = productVariants.find(v =>
        v.name.toLowerCase() === sizeValue.toLowerCase()
    );
    console.log('Found variant:', variant);
    
    const stockAlert = document.getElementById('stockAlert');
    const stockCount = document.getElementById('stockCount');
    const addToCartBtn = document.getElementById('addToCart');
    const selectWrapper = document.querySelector('.select-wrapper');
    const quantityInput = document.getElementById('quantity');

    if (!variant) {
        console.log('⚠️ No variant found, hiding alerts');
        stockAlert.style.display = 'none';
        enableAddToCart(addToCartBtn, selectWrapper);
        return;
    }

    const stockLevel = variant.stockLevel || 0;
    const stockTracking = variant.stockTracking !== false;

    console.log(`📦 Stock level: ${stockLevel}, Tracking: ${stockTracking}`);

    if (!stockTracking) {
        stockAlert.style.display = 'none';
        enableAddToCart(addToCartBtn, selectWrapper);
        return;
    }

    // Out of stock
    if (stockLevel <= 0) {
        console.log('❌ OUT OF STOCK');
        stockAlert.style.display = 'none';
        disableAddToCart(addToCartBtn, selectWrapper);
    }
    // Low stock
    else if (stockLevel <= LOW_STOCK_THRESHOLD) {
        console.log('⚠️ LOW STOCK:', stockLevel);
        stockCount.textContent = stockLevel;
        stockAlert.style.display = 'flex';
        stockAlert.classList.add('show');
        enableAddToCart(addToCartBtn, selectWrapper);
    }
    // Normal stock
    else {
        console.log('✅ Normal stock:', stockLevel);
        stockAlert.style.display = 'none';
        enableAddToCart(addToCartBtn, selectWrapper);
    }
}

// ========================================
// SIZE BOX SELECTION HANDLER
// ========================================
function selectSize(buttonElement) {
    console.log('📦 Size selected:', buttonElement.dataset.size);
    
    // Don't allow selection of out of stock sizes
    if (buttonElement.classList.contains('out-of-stock')) {
        console.log('❌ Cannot select out of stock size');
        return;
    }
    
    const container = buttonElement.closest('.size-boxes-container');
    const optionName = buttonElement.dataset.optionName;
    const selectedSize = buttonElement.dataset.size;
    
    // Remove 'selected' class from all size boxes in this group
    container.querySelectorAll('.size-box').forEach(box => {
        box.classList.remove('selected');
        box.setAttribute('aria-checked', 'false');
    });
    
    // Add 'selected' class to clicked box
    buttonElement.classList.add('selected');
    buttonElement.setAttribute('aria-checked', 'true');
    
    // Update hidden input value
    const hiddenInput = document.getElementById(optionName);
    if (hiddenInput) {
        hiddenInput.value = selectedSize;
    }
    
    // Check stock for newly selected variant
    checkStockForVariant();
}


// ========================================
// UPDATE SIZE BOXES WITH STOCK STATUS
// ========================================
function updateSizeBoxStockStatus() {
    console.log('🔄 Updating size box stock status...');
    
    document.querySelectorAll('.size-box').forEach(sizeBox => {
        const sizeName = sizeBox.dataset.size;
        const optionName = sizeBox.dataset.optionName;
        
        // Create a temporary selectedOptions object for this specific size
        const testOptions = { [optionName]: sizeName };
        
        // Find variant for this size
        const variant = productVariants.find(v => 
            v.name.toLowerCase() === sizeName.toLowerCase()
        );
        
        if (!variant) {
            console.log(`⚠️ No variant found for size: ${sizeName}`);
            return;
        }
        
        const stockLevel = variant.stockLevel || 0;
        
        // Remove existing status classes
        sizeBox.classList.remove('out-of-stock', 'low-stock');
        
        // Apply appropriate class based on stock
        if (stockLevel <= 0) {
            sizeBox.classList.add('out-of-stock');
            sizeBox.disabled = true;
            console.log(`❌ ${sizeName}: OUT OF STOCK`);
        } else if (stockLevel <= LOW_STOCK_THRESHOLD) {
            sizeBox.classList.add('low-stock');
            console.log(`⚠️ ${sizeName}: LOW STOCK (${stockLevel})`);
        } else {
            console.log(`✅ ${sizeName}: In stock (${stockLevel})`);
        }
    });
}

// Disable add to cart for out of stock items
function disableAddToCart(button, selectWrapper) {
    if (!button) return;
    
    button.textContent = 'Out of Stock';
    button.disabled = true;
    button.classList.add('out-of-stock');
    button.setAttribute('onclick', ''); // Remove onclick handler
    
    if (selectWrapper) {
        selectWrapper.classList.add('out-of-stock');
    }
}

// Enable add to cart
function enableAddToCart(button, selectWrapper) {
    if (!button) return;
    
    button.textContent = 'Add to Cart';
    button.disabled = false;
    button.classList.remove('out-of-stock');
    // Onclick is already in HTML, no need to re-add
    
    if (selectWrapper) {
        selectWrapper.classList.remove('out-of-stock');
    }
}

// ========================================
// ADD TO CART FUNCTION
// ========================================
async function addToCart(productId) {
    const quantity = 1; // Fixed quantity - users select size and add one at a time
    const button = document.getElementById('addToCart');
    const options = {};

    // Check if button is disabled (out of stock)
    if (button.disabled && button.classList.contains('out-of-stock')) {
        console.log('❌ Cannot add out of stock item');
        return;
    }

    document.querySelectorAll('.option-group input[type="hidden"]').forEach(input => {
        options[input.name] = input.value;
    });

    button.disabled = true;
    button.textContent = 'Adding...';
    
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartOverlay = document.getElementById('cart-overlay');
    if (cartSidebar && cartOverlay) {
        cartSidebar.classList.add('active');
        cartOverlay.classList.add('active');
    }
    
    const cartItems = document.getElementById('cart-items');
    if (cartItems) {
        cartItems.classList.add('loading');
    }
    
    try {
        if (window.swellCartCount === undefined) {
            window.swellCartCount = 0;
        }
        window.swellCartCount += parseInt(quantity);
        
        if (typeof updateCartCount === 'function') {
            updateCartCount();
        }
        
        // Only call Swell if it's available
        if (typeof swell !== 'undefined' && swell.cachedCart) {
            await swell.cachedCart.addItem({
                product_id: productId,
                quantity: parseInt(quantity),
                options: options
            });
        } else {
            console.log('ℹ️ Swell not available (expected in local dev with mock data)');
        }

        button.textContent = 'Added to Cart!';
        
        if (typeof updateCartDisplay === 'function') {
            updateCartDisplay();
        }
        
        setTimeout(() => {
            button.disabled = false;
            button.textContent = 'Add to Cart';
        }, 1500);

    } catch (error) {
        console.error('Add to cart error:', error);
        button.disabled = false;
        button.textContent = 'Add to Cart'; 
        alert('Error adding to cart: ' + error.message);
        
        if (cartItems) {
            cartItems.classList.remove('loading');
        }
        
        if (typeof swell !== 'undefined' && swell.cachedCart) {
            const cart = await swell.cachedCart.get();
            window.swellCartCount = cart?.itemQuantity || 0;
            if (typeof updateCartCount === 'function') {
                updateCartCount();
            }
        }
    }
}

// ========================================
// DOM READY INITIALIZATION
// ========================================
document.addEventListener('DOMContentLoaded', () => {
    console.log('🚀 Page loaded, initializing...');
    
    // Image thumbnail handler
    const firstThumbnail = document.querySelector('.thumbnail-image');
    if (firstThumbnail) {
        firstThumbnail.classList.add('active');
    }

    // Review form toggle handler
    const toggleBtn = document.getElementById('toggleReviewFormBtn');
    const formContainer = document.getElementById('reviewFormContainer');

    if (toggleBtn && formContainer) {
        toggleBtn.addEventListener('click', () => {
            toggleBtn.classList.toggle('active');
            formContainer.classList.toggle('active');
        });
    }
    
    // Quantity controls
    const quantityInput = document.getElementById('quantity');
    const plusBtn = document.querySelector('.quantity-btn.plus');
    const minusBtn = document.querySelector('.quantity-btn.minus');

    if (plusBtn) {
        plusBtn.addEventListener('click', () => {
            const currentVal = parseInt(quantityInput.value);
            const maxVal = parseInt(quantityInput.max) || 999;
            if (currentVal < maxVal) {
                quantityInput.value = currentVal + 1;
            }
        });
    }

    if (minusBtn) {
        minusBtn.addEventListener('click', () => {
            const currentVal = parseInt(quantityInput.value);
            if (currentVal > 1) {
                quantityInput.value = currentVal - 1;
            }
        });
    }

    // Check initial stock on page load
    console.log('📦 Initializing stock status...');
    updateSizeBoxStockStatus();
    
    // Check initial stock on page load
    checkStockForVariant();
});
</script>

{% endblock %}
