---
pagination:
  data: products
  size: 1
  alias: product
  addAllPagesToCollections: true
permalink: "/{{ product.slug | slugify }}/"
layout: layout.njk
---

<section class="main-grid product-sale-page">
    {% include "nav.njk" %}
    <div class="product-image-wrapper">
        <!-- Container for additional product photos -->
        <div class="additional-photos-container" id="thumbnailContainer">
            {% if product.images.length > 0 %}
                {% for image in product.images %}
                    {% if loop.index0 < 4 %}  {# Show first 4 images including featured image #}
                        <img src="{{ image.file.url }}" 
                            alt="{{ product.name }} - {% if loop.index0 === 0 %}Featured{% else %}Additional{% endif %} Image {{ loop.index }}"
                            class="thumbnail-image {% if loop.index0 === 0 %}active{% endif %}"
                            loading="lazy"
                            width="80"
                            height="80"
                            data-index="{{ loop.index0 }}"
                            onclick="swapImages(this)">
                    {% endif %}
                {% endfor %}
            {% endif %}
        </div>

        <!-- Primary image container -->
        <div class="left-half-img-container product-feature-image">
            {% if product.images and product.images[0] %}
                <img src="{{ product.images[0].file.url }}" 
                    alt="{{ product.name }}"
                    class="main-product-image"
                    id="mainImage"
                    data-index="0"
                    width="400"
                    height="400">
            {% endif %}
        </div>
    </div>

    <div class="right-half-content product-sale-content">
        {% block content %}
        <div class="product-card">
            {% if product %}
                <h1>{{ product.name }}</h1>
                
                <div class="price">
                    Price: $ {{ product.price }}
                </div>

                {% if product.description %}
                    <div class="description">
                        {{ product.description | safe }}
                    </div>
                {% endif %}

                {% if product.name=='Abada Joggers' %}
                    <div class="features-container">
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/fabric-icon.svg", "4-way stretch material", "feature-icon", undefined, undefined, undefined, eager %}
                            </div>
                            <p>4-WAY STRETCH</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/waistband.svg", "abadas with elastic waistband", "feature-icon", undefined, undefined, undefined, loading="eager"  %}
                            </div>
                            <p>4-WAY STRETCH</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/taper.svg", "abadas with tapered fit", "feature-icon", undefined, undefined, undefined, loading="eager" %}
                            </div>
                            <p>4-WAY STRETCH</p>
                        </div>
                        <div class="feature">
                            <div class="feature-image-container">
                                {% image "src/img/homepage/zipper.svg", "abadas with zipper pocket", "feature-icon", undefined, undefined, undefined, loading="eager" %}
                            </div>
                            <p>4-WAY STRETCH</p>
                        </div>
                    </div>
                {% endif %}
                
                {% if product.options %}
                    <div class="options">
                        {% for option in product.options %}
                            <div class="option-group">
                                <label for="{{ option.name }}">{{ option.name }}:</label>
                                <select id="{{ option.name }}" name="{{ option.name }}">
                                    {% for value in option.values %}
                                        <option value="{{ value.name }}">{{ value.name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        {% endfor %}
                    </div>
                {% endif %}
                
                <div class="quantity">
                    <label for="quantity">Quantity:</label>
                    <input type="number" id="quantity" name="quantity" value="1" min="1">
                </div>
                <div class="flex-container-justify">
                    <button id="addToCart" 
                            onclick="addToCart('{{ product.id }}')"
                            class="add-to-cart-button">
                        Add to Cart
                    </button>

                    <button id="buyNow" 
                            onclick="buyNow('{{ product.id }}')"
                            class="buy-now-button">
                        Buy Now
                    </button>
                </div>
            {% endif %}
        </div>
    </div>
</section>

<script>
async function addToCart(productId) {
    const quantity = document.getElementById('quantity').value;
    const options = {};
    
    // Gather selected options if they exist
    document.querySelectorAll('.option-group select').forEach(select => {
        options[select.name] = select.value;
    });

    const button = document.getElementById('addToCart');
    button.disabled = true;
    button.textContent = 'Adding...';

    try {
        // First, make sure swell is initialized
        if (!window.swell) {
            throw new Error('Swell is not initialized');
        }

        const result = await swell.cart.addItem({
            product_id: productId,
            quantity: quantity,
            options: options
        });

        console.log('Add to cart result:', result);

        button.textContent = 'Added to Cart!';
        setTimeout(() => {
            button.disabled = false;
            button.textContent = 'Add to Cart';
        }, 2000);

        // Update cart count
        if (result?.item_count) {
            updateCartCount(result.item_count);
        }

        return true; // Indicate success

    } catch (error) {
        console.error('Add to cart error:', error);
        button.disabled = false;
        button.textContent = 'Add to Cart';
        alert('Error adding to cart: ' + error.message);
        
        return false; // Indicate failure
    }
}


async function buyNow(productId) {
    const button = document.getElementById('buyNow');
    button.disabled = true;
    button.textContent = 'Processing...';

    try {
        // First, add to cart
        await addToCart(productId);

        // Get the cart
        const cart = await swell.cart.get();
        console.log('Cart response:', cart); // Debug log

        if (!cart.checkout_url) {
            throw new Error('No checkout URL available');
        }

        // Use the checkout_url directly from the cart response
        console.log('Redirecting to:', cart.checkout_url); // Debug log
        window.location.href = cart.checkout_url;

    } catch (error) {
        console.error('Buy now error:', error);
        button.disabled = false;
        button.textContent = 'Buy Now';
        alert('Error processing checkout: ' + error.message);
    }
}



// MODIFIED: Update cart count function to work with Swell's cart data
function updateCartCount(count) {
    const cartCount = document.getElementById('cart-count');
    if (cartCount) {
        cartCount.textContent = count.toString();
        cartCount.style.display = count > 0 ? 'block' : 'none';
    }
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', async () => {
    try {
        const cart = await swell.cart.get();
        console.log('Current cart:', cart);
        if (cart?.item_count) {
            updateCartCount(cart.item_count);
        }
    } catch (error) {
        console.error('Error fetching cart:', error);
    }
});



    // Store all product images data
const productImages = JSON.parse('{{ product.images | dump | safe }}');

function swapImages(thumbnailElement) {
    const mainImage = document.getElementById('mainImage');
    const thumbnails = document.querySelectorAll('.thumbnail-image');
    
    // Remove active class from all thumbnails
    thumbnails.forEach(thumb => thumb.classList.remove('active'));
    
    // Add active class to clicked thumbnail
    thumbnailElement.classList.add('active');

    // Get the index of clicked thumbnail
    const thumbnailIndex = parseInt(thumbnailElement.dataset.index);
    
    // Add fade out effect
    mainImage.style.opacity = '0';
    
    // Update main image after a brief delay (for transition effect)
    setTimeout(() => {
        mainImage.src = productImages[thumbnailIndex].file.url;
        mainImage.alt = productImages[thumbnailIndex].alt;
        mainImage.dataset.index = thumbnailIndex;
        mainImage.style.opacity = '1';
    }, 300);
}

// Initialize the first thumbnail as active
document.addEventListener('DOMContentLoaded', () => {
    const firstThumbnail = document.querySelector('.thumbnail-image');
    if (firstThumbnail) {
        firstThumbnail.classList.add('active');
    }
});

</script>
{% endblock %}